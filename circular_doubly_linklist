#include<stdio.h>
#include<stdlib.h>
#include<conio.h>
struct node{
	struct node *p;
  int i;
  struct node *n;;
};

void insertAsFirst(struct node **s,int d)
{
    struct node *n;
    n=(struct node*)malloc(sizeof(struct node));
    n->i=d;
    if(*s==NULL)
    {
    	*s=n;
    	(*s)->n=n;
    	(*s)->p=n;
	}
	else
	{
		n->n=*s;
		n->p=(*s)->p;
		(*s)->p->n=n;
		(*s)->p=n;
		*s=n;
	}
    
}
void insertAsLast(struct node **s,int data)
{
    struct node *n;
    n=(struct node*)malloc(sizeof(struct node));
    n->i=data;
    if(*s==NULL)
    {
    	*s=n;
    	(*s)->n=n;
    	(*s)->p=n;
	}
	else
	{
		n->n=*s;
		n->p=(*s)->p;
		(*s)->p->n=n;
		(*s)->p=n;
	}
}


void insertAfter(struct node *t,int data)
{
    struct node *n;
    n=(struct node*)malloc(sizeof(struct node));
    n->i=data;
    n->n=t->n;
    n->p=t;
    t->n->p=n;
    t->n=n;
    
}
void deleteFirst(struct node **s)
{
	struct node *t=*s;
  if(*s==NULL)
        printf("Underflow");
  else
  {
  	if(t->n==*s)
  	{
  	 *s=NULL;
	   free(t);	
	}
	else
	{
		t->n->p=t->p;
		t->p->n=t->n;
		*s=(*s)->n;
		free(t);
	}
  	
  }
}

void deleteLast(struct node **s)
{
    struct node *t=*s;
    if(*s==NULL)
        printf("Underflow");
    else
    {
   	if(t->n==*s)
  	{
  	 *s=NULL;
	   free(t);	
	}
	else
	{
		t=(*s)->p;
		t->p->n=*s;
		(*s)->p=t->p;
		free(t);
		
	}
	}
}

void deleteNode(struct node **s,struct node *t)
{

    if(t==*s)
    deleteFirst(s);
    else if(t->n==*s)
    deleteLast(s);
    else
    {
     t->n->p=t->p;
     t->p->n=t->n;
     free(t);
	}
}
void view(struct node *s)
{
	struct node *p=s;
    if(s==NULL)
        printf("List is empty");
    else{
        while(1){
            printf("%d ",s->i);
            if(p==s->n)
            break;
            
            s=s->n;
        }
    }
}
struct node *search(struct node *s, int d)
{
	struct node *t=s;
    while(s && 1){
        if(s->i==d)
            return(s);
            if(s->n==t)
            break;
        s=s->n;
    }
    return NULL;
}
int menu()
{
    int choice;
    printf("\n1. Insert as First");
    printf("\n2. Insert as Last");
    printf("\n3. Insert After a node");
    printf("\n4. Delete first node");
    printf("\n5. Delete last node");
    printf("\n6. Delete particular");
    printf("\n7. View List");
    printf("\n8. Exit");
    printf("\n\nEnter your choice");
    scanf("%d",&choice);
    return(choice);
}
int main()
{
    struct node *start=NULL, *temp;
    int data,x;
    while(1)
    {
        system("cls");
        switch(menu())
        {
       case 1:
            printf("Enter a number to add in the list");
            scanf("%d",&data);
            insertAsFirst(&start,data);
            break;
       case 2:
            printf("Enter a number to add in the list");
            scanf("%d",&data);
            insertAsLast(&start,data);
            break;
       case 3:
            printf("Enter data after which you want to add item");
            scanf("%d",&x);
            temp=search(start,x);
            if(temp==NULL)
                printf("Operation cannot perform");
            else{
                printf("Enter a number to add in the list");
                scanf("%d",&data);
                insertAfter(temp,data);
            }
            break;
            
       case 4:
            deleteFirst(&start);
            break;
       case 5:
            deleteLast(&start);
            break;
       case 6:
            printf("Enter data which you want to delete");
            scanf("%d",&x);
            temp=search(start,x);
            if(temp==NULL)
                printf("Data node found in the list");
            else
                deleteNode(&start,temp);
            break;
       case 7:
           view(start);
           break;
       case 8:
           printf("Thank You, press any key to exit");
           getch();
           exit(0); 
       default:
        printf("Invalid choice, try again");

        }
        getch();
    }

}
